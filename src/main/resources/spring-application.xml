<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd   
    	http://www.springframework.org/schema/aop 
     	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
     
	<!-- 标注类型 的事务配置 如果使用注解事务。就放开
	<tx:annotation-driven />-->
	
	<!-- 初始化数据 -->
	<context:annotation-config />
	
	<context:component-scan base-package="com.hd" />
	
	<mvc:annotation-driven>
        	<mvc:message-converters><!-- 解决ajax返回json乱码 -->
	        	<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		            <property name="supportedMediaTypes">
		                <list>
		                    <value>application/json;charset=UTF-8</value>
		                </list>
		            </property>
	        	</bean>
    		</mvc:message-converters>
    </mvc:annotation-driven>
	<!-- 配置视图规则 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	<!-- 配置支持文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="2048" />
	</bean>
 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
       <property name ="locations">
           <list>
            <value>classpath:jdbc.properties</value>
           </list>
       </property>
      <property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	   <!--  驱动名称 -->
	    <property name="driverClassName" value="${jdbc.driverClass}" />
	    <!-- JDBC连接串 -->
	    <property name="url" value="${jdbc.url}" />
	    <!-- 数据库用户名 -->
	    <property name="username" value="${jdbc.username}" />
	    <!-- 数据库用户密码 -->
	    <property name="password" value="${jdbc.password}"/>
	     <!-- 控制密码是否加密 -->
       <!--  <property name="connectionProperties" value="config.decrypt=true" /> -->
	   
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="config" />
	   <!--  连接池最大值 -->
	    <property name="maxActive" value="20" />
	    <!-- 初始化大小 -->
	    <property name="initialSize" value="1" />
	    <!-- 获取连接最大等待时间 -->
	    <property name="maxWait" value="60000" />
	    <!-- 连接池最小空闲 -->
	    <property name="minIdle" value="1" />
	    <!-- 逐出连接的检测时间间隔   -->
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <!-- 最小逐出时间   -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <!-- 检测连接是否有效的SQL -->
	    <property name="validationQuery" value="SELECT 1" />
	    <!-- 空闲连接时是否做测试 -->
	    <property name="testWhileIdle" value="true" />
	    <!-- 借出连接时是否做测试 -->
	    <property name="testOnBorrow" value="false" />
	    <!-- 归还连接时是否做测试 -->
	    <property name="testOnReturn" value="false" />
	    <!-- 借出连接时是否做测试 -->
	    <property name="poolPreparedStatements" value="true" />
	     <!-- Statement缓存大小 -->
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="10" />
     </bean>

 <!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(public * com.hd.service.*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.hd.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean> 
    
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
        <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean>
</beans>
